package com.myapp.sabrine.domain;

import static com.myapp.sabrine.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class DemandeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDemandeAllPropertiesEquals(Demande expected, Demande actual) {
        assertDemandeAutoGeneratedPropertiesEquals(expected, actual);
        assertDemandeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDemandeAllUpdatablePropertiesEquals(Demande expected, Demande actual) {
        assertDemandeUpdatableFieldsEquals(expected, actual);
        assertDemandeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDemandeAutoGeneratedPropertiesEquals(Demande expected, Demande actual) {
        assertThat(expected)
            .as("Verify Demande auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDemandeUpdatableFieldsEquals(Demande expected, Demande actual) {
        assertThat(expected)
            .as("Verify Demande relevant properties")
            .satisfies(e -> assertThat(e.getEtat()).as("check etat").isEqualTo(actual.getEtat()))
            .satisfies(e ->
                assertThat(e.getDateCandidature())
                    .as("check dateCandidature")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(actual.getDateCandidature())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDemandeUpdatableRelationshipsEquals(Demande expected, Demande actual) {
        assertThat(expected)
            .as("Verify Demande relationships")
            .satisfies(e -> assertThat(e.getUtilisateur()).as("check utilisateur").isEqualTo(actual.getUtilisateur()))
            .satisfies(e -> assertThat(e.getEntreprise()).as("check entreprise").isEqualTo(actual.getEntreprise()));
    }
}
